server {
    listen      80;
    listen [::]:80; # For IPv6 connections

    server_name example.com www.example.com;

    # Redirect to HTTPS
    return 301 https://example.com$request_uri;
}

server {
    listen      443 ssl http2;
    listen [::]:443 ssl http2; # For IPv6 connections

    server_name www.example.com;

    # SSL certificate files
    # To generate them, execute following command:
    # $ certbot certonly --webroot -w /srv/http/example.com/www -d example.com,www.example.com
    ssl_certificate     /etc/letsencrypt/live/example.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;

    # Common SSL settings
    include servers.d/common_ssl;

    # Redirect to the non-www host (declared below)
    return 301 https://example.com$request_uri;
}

server {
    listen      443 ssl http2;
    listen [::]:443 ssl http2; # For IPv6 connections

    server_name example.com;

    # SSL certificate files
    ssl_certificate     /etc/letsencrypt/live/example.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;

    # Common SSL settings
    include servers.d/common_ssl;

    # The document root
    root /srv/http/example.com/www;

    # Logs
    access_log /var/log/nginx/server.example.com.access.log;
    error_log  /var/log/nginx/server.example.com.error.log;

    # Restrict strangers
    #auth_basic "Authentication Required";
    #auth_basic_user_file /srv/http/example.com/.htpasswd;

    # Common server settings
    include servers.d/common;

    # Very basic serving rules
    location / {
        try_files $uri $uri/ =404;             # For static site
        #try_files $uri $uri/ /index.php?$args; # For WordPress
    }
}
